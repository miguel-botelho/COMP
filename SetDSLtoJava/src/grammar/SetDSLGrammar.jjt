/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{	
  DEBUG_PARSER=false;
  static = true;
  LOOKAHEAD = 500;
}

PARSER_BEGIN(SetDSLGrammar)
package grammar;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.nio.charset.Charset;
import java.lang.String;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.Collections;

public class SetDSLGrammar
{
  public static ArrayList<Attribute> vars = new ArrayList<Attribute>();
  public static Boolean canRun = true;
  
  public static void main(String args [])
  {
	try
    {
		String ficheiro;
	    
		if ((ficheiro = readFile("files/input_file.txt")) == null)		{			System.out.println("Error reading file.");
			return;
		}
		InputStream stream = new ByteArrayInputStream(ficheiro.getBytes(Charset.forName("UTF-8")));

		SetDSLGrammar myDSL = new SetDSLGrammar(stream);
		
		SimpleNode n = myDSL.Start();
		if (canRun)
			runTree(n);
		System.out.println(vars);
     	n.dump("");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  public static Boolean createAttr(String var, int size, Boolean type, ArrayList<Integer> content)  {
	Attribute attr = new Attribute(var, size, type, content);
		
	vars.add(attr);
	return true;
  }

  public static void changeAttr(String var, int size, Boolean type, ArrayList<Integer> content)  {	for (int i = 0; i < vars.size(); i++)	{		if (vars.get(i).getVariable().equals(var))		{			vars.get(i).setSize(size);
			vars.get(i).setType(type);
			vars.get(i).setContent(content);
		}
	}
  }

  public static Boolean checkOperations(String set, String set1, String set2) {
    if (!(checkType(set, false))) //false é output
    {
  		System.err.println("O Set " + set + " não é do tipo Output.");
  		return false;
  	}
  	if (!(checkType(set1, true))) //true é input
  	{
		System.err.println("O Set " + set1 + " não é do tipo Input.");
  		return false;
  	}
  	if (!(checkType(set2, true))) //true é input
  	{
		System.err.println("O Set " + set2 + " não é do tipo Input.");
  		return false;
  	}
	return true;
   }

  /* LIST BEGIN */
  public static ArrayList<Integer> shrinkList(ArrayList<Integer> arr, Integer size) {
	ArrayList<Integer> ret = new ArrayList<Integer>(size);
	for (int i = 0; i < size & i < arr.size(); i++) {
		ret.add(arr.get(i));
	}
	return ret;
  }

  public static ArrayList<Integer> changeContent(String var, ArrayList<Integer> content) {
	for (int i = 0; i < vars.size(); i++) {
		if (vars.get(i).getVariable().equals(var))		{			vars.get(i).setContent(content);
			return vars.get(i).getContent();
		}
	}
	return null;	
  }

  public static Boolean existsVar(String var) {
	for (int i = 0; i < vars.size(); i++) {
		  if (vars.get(i).getVariable().equals(var))
		  	return true;
		}
	return false;
  }

  public static Attribute returnAttr(String var) {
	for (int i = 0; i < vars.size(); i++) {
		  if (vars.get(i).getVariable().equals(var))
		  	return vars.get(i);
		}
	return null;
  }
    
  public static Boolean checkType(String var, Boolean type) {
	for (int i = 0; i < vars.size(); i++) {
		  if (vars.get(i).getVariable().equals(var))
		  	return vars.get(i).getType() == type;
		}
	return false;
  }
  /* LIST END */
  /* OPERATIONS BEGIN */  
  public static ArrayList<Integer> intersection(String destSet, String set, String set1) {
	Attribute attr = returnAttr(set);
	Attribute attr1 = returnAttr(set1);

	ArrayList<Integer> ret = new ArrayList<Integer>();
	Integer size = 1;

	for (int i = 0; i < attr1.getContent().size(); i++) {
		if (attr.getContent().contains(attr1.getContent().get(i)))
			ret.add(attr1.getContent().get(i));
	}
	for (int i = 0; i < vars.size(); i++) {
		if (vars.get(i).getVariable().equals(destSet))
			size = vars.get(i).getSize();
	}
	
	return shrinkList(ret, size);
  }

  public static ArrayList<Integer> union(String destSet, String set, String set1) {
	Attribute attr = returnAttr(set);
	Attribute attr1 = returnAttr(set1);

	ArrayList<Integer> ret = attr.copyContent();
	Integer size = 1;

	for (int i = 0; i < attr1.getContent().size(); i++) {
		if (!(ret.contains(attr1.getContent().get(i))))
			ret.add(attr1.getContent().get(i));
	}

	for (int i = 0; i < vars.size(); i++) {		if (vars.get(i).getVariable().equals(destSet))
			size = vars.get(i).getSize();
	}
	return shrinkList(ret, size);
  }

  public static ArrayList<Integer> concat(String destSet, String set, String set1) {
	Attribute attr = returnAttr(set);
	Attribute attr1 = returnAttr(set1);

	ArrayList<Integer> ret = attr.copyContent();
	Integer size = 1;

	for (int i = 0; i < attr1.getContent().size(); i++) {
		ret.add(attr1.getContent().get(i));
	}

	for (int i = 0; i < vars.size(); i++) {
		if (vars.get(i).getVariable().equals(destSet))
			size = vars.get(i).getSize();
	}
	return shrinkList(ret, size);
  }

  public static ArrayList<Integer> difference(String destSet, String set, String set1) {
	Attribute attr = returnAttr(set);
	Attribute attr1 = returnAttr(set1);

	ArrayList<Integer> ret = attr.copyContent();
	Integer size = 1;

	for (int i = 0; i < attr1.getContent().size(); i++) {
	  	if (ret.contains(attr1.getContent().get(i)))
			ret.remove(ret.indexOf(attr1.getContent().get(i)));
	}

	for (int i = 0; i < vars.size(); i++) {
		if (vars.get(i).getVariable().equals(destSet))
			size = vars.get(i).getSize();
	}
	return shrinkList(ret, size);
  }

  public static ArrayList<Integer> subset(String destSet, String set, String set1) {
	Attribute attr = returnAttr(set);
	Attribute attr1 = returnAttr(set1);

	ArrayList<Integer> ret = attr.copyContent();
	Integer size = 1;

	for (int i = 0; i < vars.size(); i++) {
		if (vars.get(i).getVariable().equals(destSet))
			size = vars.get(i).getSize();
	}
	return shrinkList(ret, size);
  }
  /* OPERATIONS END */

  /* METHODS BEGIN */
	public static Integer minimum(String var) {
		Integer in = -1;
		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				in = vars.get(i).minimum();
		}
		return in;
	}

	public static Integer maximum(String var) {
		Integer in = -1;
		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				in = vars.get(i).maximum();
		}
		return in;
	}

	public static Boolean is_empty(String var)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				if (vars.get(i).getSize() > 0)
					return false;
		}
		return true;
	}

	public static ArrayList<Integer> enumerate(String var)	{
		ArrayList<Integer> arr = null;		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				arr = vars.get(i).getContent();
		}
		return arr;
	}

	public static ArrayList<Integer> sort(String var)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
			{				Collections.sort(vars.get(i).getContent());
				return vars.get(i).getContent();
			}
		}
		return null;
	}

	public static Integer sum(String var)	{
	  	Integer contador = 0;		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
			{				for (int j = 0; j < vars.get(i).getContent().size(); j++)				{					contador = contador + vars.get(i).getContent().get(j);
				}
			}
		}
		return contador;
	}

	public static Integer capacity(String var)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				return vars.get(i).getSize();
		}
		return -1;
	}

	public static void pop(String var)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				System.err.println("TODO POP");
		}
	}

	public static void clear(String var)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
				vars.get(i).setContent(new ArrayList<Integer>());
		}
	}

  /* METHODS END */

  /* METHODS ARGUMENTS BEGIN */
	public static ArrayList<Integer> add(String var, Integer num)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))			{
				if (vars.get(i).getSize() > vars.get(i).getContent().size())				{					vars.get(i).getContent().add(num);
					return vars.get(i).getContent();
				}
			}
		}
		return null;
	}

	public static ArrayList<Integer> remove(String var, Integer num)	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
			{				if (vars.get(i).getContent() != null)
				{					for (int j = 0; j < vars.get(i).getContent().size(); j++)					{						if (vars.get(i).getContent().get(j) == num)						{							vars.get(i).getContent().remove(j);
							return vars.get(i).getContent();
						}
					}
				}
			}
		}
		return null;
	}

	public static Integer equals(String var, String var1)	{
	  	ArrayList<Integer> te = null;
	  	Boolean b = true;
	  	Integer siz = -1;
	  	ArrayList<Integer> te1 = new ArrayList<Integer>(2);
	  	Integer siz1 = -2;		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
			{
				te = vars.get(i).getContent();
				siz = vars.get(i).getSize();
			}
		}

		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
			{
			  	b = false;
				te1 = vars.get(i).getContent();
				siz1 = vars.get(i).getSize();
			}
		}

		if ((siz == siz1) || (te.size() == te1.size()))
		{			for (int i = 0; i < te.size(); i++)			{				if (te.get(i) != te1.get(i))					return 1;
			}
		}
		else if (b)
			return -1;
		return 0;
	}

	public static Boolean is_element(String var, Integer num)
	{		for (int i = 0; i < vars.size(); i++) {
			if (vars.get(i).getVariable().equals(var))
			{
				for (int j = 0; j  < vars.get(i).getContent().size(); j++)				{					if (vars.get(i).getContent().get(j) == num)
						return true;
				}
			}
		}
		return false;
	}

  /* METHODS ARGUMENTS END */

  public static String readFile(String fileName) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(fileName));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append("\n");
            line = br.readLine();
        }
        return sb.toString();
    } finally {
        br.close();
    }
  }

  public static void runTree(SimpleNode n)  {	for (int i = 0; i < n.jjtGetNumChildren(); i++)
    {
      SimpleNode temp = (SimpleNode) n.jjtGetChild(i);

      switch (temp.getVal())
      {
      	case "Attribution":
      		runAtt(temp);
      		break;
      	case "MethodArguments":
      		runMetArgs(temp);
      		break;
      	case "MethodNoArguments":
      		runMet(temp);
      		break;
      	case "Operation":
      		runOp(temp);
      		break;
      	default:
      		break;     } 
    }
  }

  public static void runMet(SimpleNode n)  {
    for (int i = 0; i < n.jjtGetNumChildren(); i++)	{
		SimpleNode no = (SimpleNode) n.jjtGetChild(i);
		switch (no.getFunc())
		{
			case "is_empty()":
				if (is_empty(no.getVal()))
					System.out.println("Set " + no.getVal() + " is empty");
				else System.out.println("Set " + no.getVal() + " is not empty");
				break;
			case "iterate()":
				//
				break;
			case "enumerate()":
				System.out.println("Set enumerated: " + enumerate(no.getVal()));
				break;
			case "sort()":
				System.out.println("The Set " + no.getVal() + " has been sorted. The new content is: " + sort(no.getVal()));
				break;
			case "capacity()":
				System.out.println("The capacity of " + no.getVal() + " is " + capacity(no.getVal()));
				break;
			case "pop()":
				break;
			case "clear()":
				System.out.println(no.getVal() + " has been cleared");
				break;
			case "sum()":
				System.out.println("The sum of " + no.getVal() + " is " + sum(no.getVal()));
				break;
			case "min()":
				System.out.println("The minimum of " + no.getVal() + " is " + minimum(no.getVal()));
				break;
			case "max()":
				System.out.println("The minimum of " + no.getVal() + " is " + maximum(no.getVal()));
				break;
			default:
				break;		}	}
  }

  public static void runMetArgs(SimpleNode n)  {	Integer num = 0;
	String function = "";
	for (int i = 0; i < n.jjtGetNumChildren(); i++)
	{
		SimpleNode novo = (SimpleNode) n.jjtGetChild(i);
		//tipo
		
		if (isNumeric(novo.getVal()))
			num = Integer.parseInt(novo.getVal());
		else if (novo.getFunc() != "")
			function = novo.getFunc();		
  	}

	ArrayList<Integer> temp;
  	switch (function)
	{
		case "add(":
			temp = add(n.getFunc(), num);
			if (temp != null)
				System.out.println("Set enumerated: " + temp);
			else System.err.println("The set " + n.getFunc() + " doesn't have enough size.");
			break;
		case "remove(":
			temp = remove(n.getFunc(), num);
			if (temp != null)
				System.out.println("Set enumerated: " + temp);
			else System.err.println("The set " + n.getFunc() + " doesn't have the element " + num);
			break;
		case "equals(":
			Integer na = equals(n.getFunc(), ((SimpleNode)n.jjtGetChild(1)).getVal());
			if (na == 0)
				System.out.println("The sets " + n.getFunc() + " and " + ((SimpleNode)n.jjtGetChild(1)).getVal() + " are equal");
			else if (na == 1)
				System.out.println("The sets " + n.getFunc() + " and " + ((SimpleNode)n.jjtGetChild(1)).getVal() + " are not equal");
			else System.err.println("The set " + ((SimpleNode)n.jjtGetChild(1)).getVal() + " doesn't exist");
			break;
		case "is_element(":
			if (is_element(n.getFunc(), num))
				System.out.println("The set " + n.getFunc() + " contains the element " + num);
			else System.out.println("The set " + n.getFunc() + " doesn't contain the element " + num);
			break;
		default:
			break;
	}
  	
  }

  public static void runOp(SimpleNode n)  {
    String set1 = "";
    String set2 = "";
    String set3 = "";
    String op = "op";
    
    SimpleNode novo = (SimpleNode) n.jjtGetChild(0);
    set1 = novo.getVal();

    novo = (SimpleNode) n.jjtGetChild(1);
    set2 = novo.getVal();

    novo = (SimpleNode) n.jjtGetChild(2);
    op = novo.getVal();

    novo = (SimpleNode) n.jjtGetChild(3);
    set3 = novo.getVal();

	ArrayList<Integer> no;
    switch (op)    {		case "+":
			no = changeContent(set1, union(set1, set2, set3));
			if (no != null)
				System.out.println(op + " executed. The set " + set1 + " is: " + no);
			else System.err.println("Error executing " + op);
			break;
		case "int":
			no = changeContent(set1, intersection(set1, set2, set3));
			if (no != null)
				System.out.println(op + " executed. The set " + set1 + " is: " + no);
			else System.err.println("Error executing " + op);
			break;
		case "diff":
			no = changeContent(set1, difference(set1, set2, set3));
			if (no != null)
				System.out.println(op + " executed. The set " + set1 + " is: " + no);
			else System.err.println("Error executing " + op);
			break;
		case "concat":
			no = changeContent(set1, concat(set1, set2, set3));
			if (no != null)
				System.out.println(op + " executed. The set " + set1 + " is: " + no);
			else System.err.println("Error executing " + op);
			break;
		default:
			break;
    }
    
  }

  public static void runAtt(SimpleNode n)  {	String var = "";
	  Integer size = 0;
	  Boolean type = true;
	  ArrayList<Integer > vals = new ArrayList<Integer>();
	  for (int i = 0; i < n.jjtGetNumChildren(); i++)
	  {
		SimpleNode novo = (SimpleNode) n.jjtGetChild(i);
		//tipo
		
		if (novo.getVal().equals("Input"))
			type = true;
		else if (novo.getVal().equals("Output"))
			type = false;
		//size
		else if (isNumeric(novo.getVal()))
			size = Integer.parseInt(novo.getVal());
		else if (novo.getVal() != "")
			var = novo.getVal();
		else		{		  vals = novo.getVals();
		  size = vals.size();
		}
	  }
	  if (!var.equals(""))
	  	changeAttr(var, size, type, vals);
  }
  
  public static boolean isNumeric(String str)  {  
	  try  
	  {  
	    double d = Double.parseDouble(str);  
	  }  
	  catch(NumberFormatException nfe)  
	  {  
	    return false;  
	  }  
	  return true;  
  }

}

PARSER_END(SetDSLGrammar)

< DEFAULT > SKIP: 
{
"/* @SETDSL\n" : DSL
}

< DEFAULT > SKIP: //se quiserem guardar o texto, então usem MORE em vez de SKIP
{
 < ~[] >
}

< DSL > SKIP:
{ 	"*/": DEFAULT
}

< DSL > SKIP:
{
  " " | "\r" | "\t"
}

< DSL > TOKEN:
{
  	< POINT : "." >
 	| < EQUALS : "=" >
 	| < TWO : ":" >
	| < OPERATION : "int"|"+"|"diff"|"concat" >
 	| < VALUES : ([ "0"-"9" ])+","([ "0"-"9" ])+(","([ "0"-"9" ])+)* >
    | < INTEGER : ([ "0"-"9" ])+ >
	| < LF : "\n" >
	| < TYPE : "Input"|"Output" >
	| < IS_EMPTY : "is_empty()" >
	| < ITERATE : "iterate()" >
	| < ENUMERATE : "enumerate()" >
	| < SORT : "sort()" >
	| < CAPACITY : "capacity()" >
	| < POP : "pop()" >
	| < CLEAR : "clear()" >
	| < SUM : "sum()" >
	| < MIN : "min()" >
	| < MAX : "max()" >
	| < ADD : "add(" >
	| < REMOVE : "remove(" >
	| < EQUAL : "equals(" >
	| < IS_ELEMENT : "is_element(" >
	| < SUB : "sub(" >
	| < CHAR : [ "A"-"Z", "a"-"z" ] >
	| < SET_OPEN : "Set(" >
	| < SET : "Set();" >
	| < COMMA : ";" >
	| < CLOSE : ");" >
}

SimpleNode Start():
{}
{
	(Att() < LF >)
	(Att() < LF >)
	(Att_size() < LF >)
	(Opers() < LF >)
	{		return jjtThis;
	}
}


void EndOfFile() #void:
{}
{	"*/" < EOF >
}

/*
void StartOfFile() #void:
{}
{  "/* @SETDSL" < LF >}
*/

void Opers() #Operations:
{	Token set;
}
{	set = < CHAR >
	{
		if (!existsVar(set.image))
		{
			System.err.println("A variável " + set.image + " não existe.");
			canRun = false;
			return;
		}
	  
	  	String set2;
	  	set2 = Oper2(set.image);		if (!existsVar(set2))
		{
			System.err.println("A variável " + set2 + " não existe.");
			canRun = false;
			return;
		}

		String op;
		op = Op();

		String set3;
		set3 = Oper3();
		if (!existsVar(set3))
		{			System.err.println("A variável " + set3 + " não existe.");
			canRun = false;
			return;
		}
		if (!(checkOperations(set.image, set2, set3)))
		{
			canRun = false;
			return;
		}
	} #Set1
	{
		jjtThis.val = "Operation";
		SimpleNode no = (SimpleNode) jjtThis.jjtGetChild(0);
	  	no.val = set.image;
	}
}

String Op() #Operation:
{
	Token o;
}
{
	o = < OPERATION >
	{		jjtThis.val = o.image;
	}
	{
	  	return o.image;	
	}
}

String Oper2(String s) #Set2:
{	Token set2, eq;
}
{	eq = < EQUALS > set2 = < CHAR >
	{		jjtThis.val = set2.image;
	}
	{
	  	if (!existsVar(set2.image))
		{
			System.err.println("A variável " + set2.image + " não existe.");
			canRun = false;
			return null;
		}		return set2.image;
	}
}

String Oper3() #Set3:
{
	Token set3;
}
{
	set3 = < CHAR > < COMMA >
	{		jjtThis.val = set3.image;
	}
	{
	  	if (!existsVar(set3.image))
		{
			System.err.println("A variável " + set3.image + " não existe.");
			canRun = false;
			return null;
		}
		return set3.image;
	}
}
void MethodsArgs() #MethodArguments:
{	Token set, pt;
}
{	set = < CHAR > pt = < POINT >
	{		String t = set.image;
		String s = FuncArgs();
		if (!existsVar(t))
		{			System.err.println("A variável " + t + " não existe.");
			canRun = false;
			return;
		}
	}
	{
	  jjtThis.val = "MethodArguments";
	  SimpleNode no = (SimpleNode) jjtThis.jjtGetChild(0);
	  jjtThis.func = set.image;
	}
}

void MethodsNoArgs() #MethodNoArguments:
{
	Token set, pt;
}
{
	set = < CHAR > pt = < POINT >
	{
		String t = set.image;
		String s = Func();
		if (!existsVar(t))
		{
			System.err.println("A variável " + t + " não existe.");
			canRun = false;
			return;
		}
	} 
	{
	  jjtThis.val = "MethodNoArguments";
	  SimpleNode no = (SimpleNode) jjtThis.jjtGetChild(0);
	  no.val = set.image;
	}
}

String Func() #Function:
{	Token method;
}
{
	(method = < IS_EMPTY > < COMMA >
	{
		jjtThis.func = method.image;
	}	{		return method.image;
	})
	| (method = < ITERATE > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < ENUMERATE > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < SORT > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < CAPACITY > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < POP > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < CLEAR > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < SUM > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < MAX > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
	| (method = < MIN > < COMMA >
	{
		jjtThis.func = method.image;
	}
	{		return method.image;
	})
}

String FuncArgs() #Function:
{
	Token method;
}
{
	(method = < ADD >
	{
		jjtThis.func = method.image;
	}
	{
	  	Number();
		return method.image;
	})
	| (method = < REMOVE >
	{
		jjtThis.func = method.image;
	}
	{
	  	Number();
		return method.image;
	})
	| (method = < EQUAL >
	{
		jjtThis.func = method.image;
	}
	{
	  	Char();
		return method.image;
	})
	| (method = < IS_ELEMENT >
	{	
		jjtThis.func = method.image;
	}
	{
	  	Number();
		return method.image;
	})
}

Integer Number() #Number:
{	Token n;
}
{	n = < INTEGER > < CLOSE >
	{		jjtThis.val = n.image;
		return Integer.parseInt(n.image);
	}
}

String Char() #Set:
{	Token c;
}
{	c = < CHAR > < CLOSE >
	{		jjtThis.val = c.image;
		return c.image;
	}
}


void Att_size() #Attribution:
{
  Token t;
}
{  	t = < TYPE >
	{
	  switch(t.image)
	  {
	    case "Input":
		{
		  String t1 = Token(); //0 Input
		  Integer s = Size();
		  if (existsVar(t1))
		  {
			System.err.println("A variável " + t1 + " já existe.");
			canRun = false;
			return;
	 	  }
	 	  Attribute attr = new Attribute(t1, 0, true, new ArrayList<Integer>());
		  vars.add(attr);
		  break;
		}
		case "Output":
		{
		  String t1 = Token(); //1 Output
		  Integer s = Size();
		  if (existsVar(t1))
		  {
			System.err.println("A variável " + t1 + " já existe.");
			canRun = false;
			return;
	 	  }
	 	  Attribute attr = new Attribute(t1, 0, false, new ArrayList<Integer>());
		  vars.add(attr);
		  break;
		}
		default:
		{
		  break;
		}	
	  }
	} #Intro	{
	  jjtThis.val = "Attribution";
	  SimpleNode no = (SimpleNode) jjtThis.jjtGetChild(0);
	  no.val = t.image;	}
}
//
void Att_empty() #Attribution:
{	Token t;
}
{	t = < TYPE >
	{
	  switch(t.image)	  {	    case "Input":
		{
		  String t1 = Token_empty(); //0 Input
		  if (existsVar(t1))
		  {
			System.err.println("A variável " + t1 + " já existe.");
			canRun = false;
			return;
	 	  }
	 	  Attribute attr = new Attribute(t1, 0, true, new ArrayList<Integer>());
		  vars.add(attr);
		  break;	  
		}
		case "Output":
		{
		  String t1 = Token(); //1 Output
		  if (existsVar(t1))
		  {
			System.err.println("A variável " + t1 + " já existe.");
			canRun = false;
			return;
	 	  }
	 	  Attribute attr = new Attribute(t1, 0, false, new ArrayList<Integer>());
		  vars.add(attr);
		  break;
		}
		default:
		{
		  break;
		}	
	  }
	} #Intro
	{
	  jjtThis.val = "Attribution";
	  SimpleNode no = (SimpleNode) jjtThis.jjtGetChild(0);
	  no.val = t.image;
	}
}
//

void Att() #Attribution:
{	Token t;
}
{
  t = < TYPE >
  {
    String t1;
    ArrayList<Integer> arr;
    Attribute attr;	switch(t.image) {		case "Input":
			t1 = Token();
			arr = Vals();
			if (existsVar(t1))
			{
				System.err.println("A variável " + t1 + " já existe.");
				canRun = false;
				return;
		 	}
		 	attr = new Attribute(t1, 0, true, new ArrayList<Integer>());
			vars.add(attr);
			break;
		case "Output":
			t1 = Token();
			arr = Vals();
			if (existsVar(t1))
			{
				System.err.println("A variável " + t1 + " já existe.");
				canRun = false;
				return;
		 	}
		 	attr = new Attribute(t1, 0, false, new ArrayList<Integer>());
			vars.add(attr);
			break;
		default:		{
		  break;		}	
	}
  } #Intro
  	{
  	  jjtThis.val = "Attribution";
	  SimpleNode no = (SimpleNode) jjtThis.jjtGetChild(0);
	  no.val = t.image;
	}
}
//
String Token() #Token:
{	Token ch;
}
{	ch = < CHAR > < TWO > < SET_OPEN >
	{		jjtThis.val = ch.image;
	}
	{		return ch.image;
	}	
}

String Token_empty() #Token:
{
	Token ch;
}
{
	ch = < CHAR > < TWO > < SET >
	{
		jjtThis.val = ch.image;
	}
	{
		return ch.image;
	}
	
}

Integer Size() #Size:
{	Token s;
}
{	s = < INTEGER > < CLOSE >
	{  
		jjtThis.val = s.image;
	}
	{
	 	String set = s.image;
		return Integer.parseInt(s.image);  	}	   
}


ArrayList<Integer> Vals() #Values:
{	Token vals;
}
{
  vals = < VALUES > < CLOSE >
  {
	  String[] valores = vals.image.split(",");
	  	ArrayList<Integer> val = new ArrayList<Integer>();
	
	  	for (int i = 0; i < valores.length; i++) {
			val.add(Integer.parseInt(valores[i]));
	  	}
	  	jjtThis.vals = val;
	  	return val;
   }
   
}